"""
Script de prueba para verificar la poblaci√≥n de usuarios
"""
import asyncio
import os
import sys
from dotenv import load_dotenv

# Cargar variables de entorno
load_dotenv()

# Agregar el directorio ra√≠z al path
sys.path.append(os.path.dirname(__file__))

from user_service.populate_data.user_data import populate_user_data

async def test_user_populate():
    """Probar la poblaci√≥n de usuarios"""
    print("üß™ PROBANDO POBLACI√ìN DE USUARIOS")
    print("=" * 50)
    
    # Verificar configuraci√≥n
    access_token = os.getenv("ACCESS_TOKEN")
    api_gateway_url = os.getenv("API_GATEWAY_URL", "http://localhost:8000")
    
    print(f"üîß Configuraci√≥n:")
    print(f"   API Gateway URL: {api_gateway_url}")
    print(f"   Access Token: {'‚úÖ Configurado' if access_token else '‚ùå No configurado'}")
    
    if not access_token:
        print("\n‚ùå ERROR: ACCESS_TOKEN no configurado")
        print("   Configura ACCESS_TOKEN en tu archivo .env")
        return
    
    # Probar en modo dry-run primero
    print("\nüîç PROBANDO EN MODO DRY-RUN...")
    try:
        result = await populate_user_data(dry_run=True)
        print(f"‚úÖ Dry-run exitoso: {result}")
    except Exception as e:
        print(f"‚ùå Error en dry-run: {e}")
        return
    
    # Preguntar si continuar con inserci√≥n real
    print("\n" + "=" * 50)
    response = input("¬øDeseas continuar con la inserci√≥n real? (y/N): ")
    
    if response.lower() in ['y', 'yes', 's√≠', 'si']:
        print("\nüöÄ INICIANDO INSERCI√ìN REAL...")
        try:
            result = await populate_user_data(dry_run=False)
            print(f"‚úÖ Inserci√≥n completada: {result}")
        except Exception as e:
            print(f"‚ùå Error en inserci√≥n: {e}")
    else:
        print("‚è≠Ô∏è  Saltando inserci√≥n real")

if __name__ == "__main__":
    asyncio.run(test_user_populate()) 